global currentcanvas,gettingimage,canchangecolor,currenta,currentr,currentg,currentb,currentbarinfo,currentbartimer,panning,panning2,titlebarheight,windowwidth,windowheight,homepage,primaryr,primaryg,primaryb,primarya,blendmode,toolimage,zoom,nnoise
nnoise = 0
blendmode = 1
homepage = False
currentbarinfo = ""
currentbartimer = 0
canchangecolor = True
gettingimage = False
currentcanvas = -1
messages = []
titlebarheight = 15
NEWLINE_CHAR = {'\n', '\r'}
import pygame,math,os,time,colorsys,cv2
import numpy as np
from random import randint
from canvashandler import *
from PIL import Image
from tkinter import filedialog as tkFileDialog
outlinecolor = (31, 30, 28)
basecolor = (41, 40, 38)
windowwidth = 1280
windowheight = 720
defaultfile = '!EDIT WITH CAUTION!\n[This file is autogenerated by pydraw on the first time it is started, unless the file has been moved or deleted.]\nfirstrun = True\ntitlebarsize = 15\ndefaultfont = \\resources\\arial.ttf\ntitlebarfont = \\resources\\arialbi.ttf\npensizehelp = 1defaultpensize = 1\ndefaultprimarycolor = [0,0,0,255]\ndefaultprimarycolor = [255,255,255,255]\n'

pygame.init()
display = pygame.display.set_mode((windowwidth,windowheight),pygame.RESIZABLE,0,0,1,)
pygame.display.set_caption("pydraw")
pygame.display.set_icon(pygame.image.load(os.path.dirname(os.path.abspath(__file__))+"\\resources\\pydraw.png"))
togglepanning = False
def getresourceexactpath(paff):
    return os.path.dirname(os.path.abspath(__file__))+paff

toolimage = pygame.image.load(getresourceexactpath("\\resources\\notool.png")).convert_alpha()

global cfg
cfg = None
if os.path.exists(getresourceexactpath("\\config.cfg")) == False:
    ae = open(getresourceexactpath("\\config.cfg"),"w")
    ae.write(defaultfile)
    ae.flush()
    ae.close()


def addspaces(txt,length):
    for x2 in range(0, length - len(txt), 1):
        txt = txt+" "
    return txt

def newmessage(x,y,width,height,title,closefunction=None):
    global titlebarheight
    messages.append([x,y - ((height + titlebarheight) / 2),width,1,title,[],x,y - ((height + titlebarheight) / 2),height,[],True,closefunction])
    return len(messages) - 1

def newtext(message,x,y,text,fontsize,alignment):
    message[5].append(["textbox",x,y,text,fontsize,alignment])

def newbox(message,x,y,width,height,color):
    message[5].append(["box",x,y,width,height,color])
def newbutton(message,x,y,width,height,text,command=lambda : close(0)):
    message[5].append(["textbutton",x,y,width,height,text,command])

def getimagearray(canvas,rgba):
    aa = []
    currenttable = []
    for v in range(len(canvas[2]) - 1,0,-1):
      for v2 in range(len(canvas[2][v]) - 1,0,-1):
        table = [canvas[2][v][0],canvas[2][v][1],canvas[2][v][2]]
        if rgba == True:
            if len(canvas[2][v]) == 4:
                table.append(canvas[2][v][3])
            else:
                table.append(255)
        currenttable.append(table)
        if len(currenttable) == canvas[0]:
            aa.append(currenttable)
            currenttable = []
    return aa

def makedirlisting(msg,di,listpart):
    position = 0
    for vvv in range(3,len(messages[msg][5]) - 1,1):
        print(messages[msg][5])
        if messages[msg][5][vvv][0] == "textbutton":
            del messages[msg][5][int(vvv)]
    dir = []
    files = []
    table = ["_css","_hss","_tidy","_tools","wh_project","hh_out","hh_updated"]
    dir_path = os.listdir(di)
    append = dir.append
    append2 = files.append
    for v in dir_path:
        paff = os.path.join(di,v)
        if os.path.isdir(paff):
            append(v+" [Directory]")
        else:
            extension = os.path.splitext(v)[1]
            if extension == ".jpg" or extension == ".bmp" or extension == ".png" or extension == ".jpeg":
                append2(v)
    position = 0
    listed = 0
    scrollbarlist = 10
    for vv in dir:
     if position >= listpart:
      if listed < scrollbarlist:
        newbutton(messages[msg],(750 / 2) + 25,35 + (16 * (position - listpart)),750,15,vv,command=lambda : makedirlisting(msg,os.path.join(di,v),0))
        listed += 1
     position += 1
    for vv in files:
     if position >= listpart:
      if listed < scrollbarlist:
        newbutton(messages[msg],(750 / 2) + 25,35 + (16 * (position - listpart)),750,20,vv)
        listed += 1
     position += 1
    

def close(message):
    if messages[message][11] != None:
        messages[message][11]()
    messages[message][7] = messages[message][1] + ((messages[message][8]))
    messages[message][8] = 0
    messages[message][5] = []

def fileopenercheck(msg):
    if messages[msg][9][0] == "":
        messages[msg][10] = False
        print("awooo")
        m = newmessage(windowwidth / 2,windowheight / 2,150,50,"Error",closefunction=lambda : togglewindowdisabled(msg))
        newtext(messages[m],2,2,"Please select a file.",15,"left")
        newbutton(messages[m],200 - 27,37,40,15,"ok",lambda : close(m))

def fileopenclose(msg):
    global gettingimage
    gettingimage = False

def togglewindowdisabled(msg):
    messages[msg][10] = not messages[msg][10]

def twofunct(funct1,funct2):
    funct1()
    funct2()

def askimage():
    global gettingimage
    if gettingimage == False:
        gettingimage = True
        file = tkFileDialog.askopenfilename(filetypes=([('Images','*.png *.jpg *.jpeg *.bmp *.pd')]),title="Open an image")
        if file != "": 
            loadcanvas(file)
        gettingimage = False

def savearrayto(canvas,file):
    global currentbarinfo,currentbartimer,gettingimage
    currentbarinfo = "Saving image, please wait..."
    currentbartimer = 999999999
    arr = np.array(canvas[2])
    Image.fromarray(arr.astype(np.uint8)).save(file, quality=100, subsampling=0)
    currentbarinfo = "Saved image to '"+file+"'."
    currentbartimer = 2

def getimagearrayfordrawing(canvas):
    global currentcanvas
    return np.array(canvases[currentcanvas][9])
def saveimg(canvas,saveas):
    global currentbarinfo,currentbartimer,gettingimage
    if gettingimage == False:
        gettingimage = True
        if saveas == True or canvas[6] == "":
            file = tkFileDialog.asksaveasfilename(filetypes=([('Images','*.png *.jpg *.jpeg *.bmp *.pd')]),title="Save image")
            if file != "": 
                savearrayto(canvas,file)
                canvas[6] = file
        else:
            savearrayto(canvas,canvas[6])
        gettingimage = False
def saveproject(canvas,path):
    global currentbarinfo,currentbartimer
    currentbarinfo = "Saving project, please wait..."
    currentbartimer = 999999999
    file = open(path,"w")
    file.write(str(canvas))
    currentbarinfo = "Saved project to '"+path+"'."
    currentbartimer = 2

def makecanvas(sizex,sizey,backgroundcolor):
    global currentcanvas
    currentcanvas = createcanvas(sizex,sizey,backgroundcolor)
    currentcanvas -= 1

def loadproject(project):
    global currentcanvas
    awoo = convertstringstopython(open(project,"r").read())
    canvases.append(awoo)
    currentcanvas = len(canvases) - 1

def loadcanvas(img):
    global currentcanvas
    if img[len(img) - 3:len(img)] == ".pd":
        loadproject(img)
    else:
        appendvalue = []
        im = Image.open(img)
        print(im)
        a = np.array(im)
        canvas = a
        currenttable = []
        table2 = []
        table22 = []
        for v in range(len(canvas[2]) - 1,0,-1):
            for v2 in range(len(canvas[2][v]) - 1,0,-1):
                table = [canvas[2][v][0],canvas[2][v][1],canvas[2][v][2]]
                if len(canvas[2][v]) == 4:
                    color = alphablend([255,15,255,255],[table[0],table[1],table[2],canvas[2][v][3]])
                    table[0] = color[0]
                    table[1] = color[0]
                    table[2] = color[0]
                print(table)
                currenttable.append(table)
            table2.append(currenttable)
        for v in range(len(canvas[2]) - 1,0,-1):
            for v2 in range(len(canvas[2][v]) - 1,0,-1):
                table = [canvas[2][v][0],canvas[2][v][1],canvas[2][v][2]]
                if len(canvas[2][v]) == 4:
                    color = alphablend([255,15,255,255],[table[0],table[1],table[2],canvas[2][v][3]])
                    table[0] = color[0]
                    table[1] = color[0]
                    table[2] = color[0]
                    table[3] = 255
                print(table)
                currenttable.append(table)
            table22.append(currenttable)
        canvases.append([len(a[0]),len(a),a,False,0,0,img,[],-1,a])
        currentcanvas = len(canvases) - 1

def pointtowards(x,y,x2,y2):
 dir = 0
 if (x2 - x) == 0:
    dir = math.atan((y2 - y))
 elif (y2 - y) == 0:
    dir = math.atan((x2 - x))
 else:
    dir = math.atan(((x2 - x) / (y2 - y)))
 return dir

def getdistance(x1,x2,y1,y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2) * 0.1

def clamp(value,min,max):
    va = value
    if va < min:
        va = min
    elif va > max:
        va = max
    return va

def alphablend(colorRGBA1,colorRGBA2):
    alpha = 255 - (((255 - colorRGBA1[3]) * (255 - colorRGBA2[3])) / 255)
    red   = (colorRGBA1[0] * (255 - colorRGBA2[3]) + colorRGBA2[0] * colorRGBA2[3]) / 255
    green = (colorRGBA1[1] * (255 - colorRGBA2[3]) + colorRGBA2[1] * colorRGBA2[3]) / 255
    blue  = (colorRGBA1[2] * (255 - colorRGBA2[3]) + colorRGBA2[2] * colorRGBA2[3]) / 255 
    return [int(red), int(green), int(blue), int(alpha)]

def setpixel(pixelx,pixely,color,blendmode="Normal",symmetricalx=False,symmetricaly=True):
    global currentcanvas
    pixelx = int(pixelx)
    pixely = int(pixely)
    if pixely < canvases[currentcanvas][1] - 1 and pixely >= 0:
          if pixelx <= canvases[currentcanvas][0] - 1 and pixelx >= 0:
            rgba = [canvases[currentcanvas][2][pixely][pixelx][0],canvases[currentcanvas][2][pixely][pixelx][1],canvases[currentcanvas][2][pixely][pixelx][2],255]
            rgboverwrite = [color[0],color[1],color[2],color[3]]
            if blendmode != "Overwrite":
                rgboverwrite = alphablend(rgba,[color[0],color[1],color[2],color[3]])
            rgboverwrite = [clamp(rgboverwrite[0],0,255),clamp(rgboverwrite[1],0,255),clamp(rgboverwrite[2],0,255),clamp(rgboverwrite[3],0,255)]
            canvases[currentcanvas][9][pixely][pixelx] = [rgboverwrite[0],rgboverwrite[1],rgboverwrite[2]]
            if symmetricalx == True:
                setpixel((pixelx * -1) + (canvases[currentcanvas][0]),pixely,color,blendmode=blendmode,symmetricalx=False,symmetricaly=False)
            if symmetricaly == True:
                setpixel(pixelx,(pixely * -1) + (canvases[currentcanvas][1]),color,blendmode=blendmode,symmetricalx=False,symmetricaly=False)
            if symmetricalx == True and symmetricaly:
                setpixel((pixelx * -1) + (canvases[currentcanvas][0]),(pixely * -1) + (canvases[currentcanvas][1]),color,blendmode=blendmode,symmetricalx=False,symmetricaly=False)


def drawcircle(x, y,pressure,color,radius,noise,antialiased=True,blendmode="Normal"):
    global currentcanvas,canvases,homepage
    if homepage == False and len(canvases) > 0:
     radius = radius + 4
     noise = noise / 3
     r = radius / 2
     d = int(2 * r)
     for yy in range(1, d, 1):
        for xx in range (1, d, 1):
            deltaX = r - xx
            deltaY = r - yy
            distance = math.sqrt(deltaX * deltaX + deltaY * deltaY)
            realx = xx + (randint(int(-noise / 2),int(noise / 2)))
            realy = yy + (randint(int(-noise / 2),int(noise / 2)))
            c = clamp(r - distance, 0, 1)
            if antialiased == False:
                if c > 0.5:
                    c = 0
                else:
                    c = 1
            c = [color[0],color[1],color[2],clamp(((255 * c) * (color[3] / 255)) + (randint(int(-noise / 2),0) * 3),0,255)]
            setpixel(((realx + x) - r) - 1, ((realy + y) - r) - 1, c,blendmode=blendmode)

def drawsquare(x, y,xsize,ysize,pressure,color,noise,antialiased=False):
    global currentcanvas,canvases,homepage
    if homepage == False and len(canvases) > 0:
     radius = radius + 5
     noise = 10
     r = radius / 2
     d = int(2 * r)
     for yy in range(1, d, 1):
        for xx in range (1, d, 1):
            deltaX = r - xx
            deltaY = r - yy
            distance = math.sqrt(deltaX * deltaX + deltaY * deltaY)
            c = clamp(r - distance, 0, 1)
            if antialiased == True:
                if c > 0.5:
                    c = 0
                else:
                    c = 1
            c = [color[0],color[1],color[2],255 * c]
            c[3] = 1
            setpixel(((xx + x) - r) - 1, ((yy + y) - r) - 1, c)

def removespaces(st):
    strippedstr = ""
    for v in st:
        if v != " ":
            strippedstr = strippedstr+v
    return strippedstr

def first_chars(file_path):
    line = ""
    lines = []
    with open(file_path) as fh:
        while c := fh.read(1):
            if not c in NEWLINE_CHAR:
                line = line+c
            else:
                lines.append(line)
                line = ""
        fh.close()
    return lines

def convertstringstopython(st):
    table = ["0","1","2","3","4","5","6","7","8","9"]
    isdig = True
    istable = False
    for v in st:
        if v not in table:
            isdig = False
            break

    if ("[" in st and "]" in st and "," in st) or ("[" in st and "]" in st):
        istable = True
            
    if st == "True":
        st = True
    elif st == "False":
        st = False
    elif isdig == True:
        st = int(st)
    elif istable == True:
        tab = []
        builtvalue = ""
        for v in st:
            if v != "[" and v != "]":
                if v == ",":
                    tab.append(convertstringstopython(removespaces(builtvalue)))
                    builtvalue = ""
                else:
                    builtvalue = builtvalue+v
            elif builtvalue != "" and v == "]":
                tab.append(convertstringstopython(removespaces(builtvalue)))
                builtvalue = ""
        st = tab
    else:
        print("this value cannot be converted to any other format")
    return st

def make_surface_rgba(array):
    """Returns a surface made from a [w, h, 4] numpy array with per-pixel alpha
    """
    shape = array.shape
    if len(shape) != 3 and shape[2] != 4:
        raise ValueError("Array not RGBA")

    # Create a surface the same width and height as array and with
    # per-pixel alpha.
    surface = pygame.Surface(shape[0:2], pygame.SRCALPHA, 32)

    # Copy the rgb part of array to the new surface.
    pygame.pixelcopy.array_to_surface(surface, array[:,:,0:3])

    # Copy the alpha part of array to the surface using a pixels-alpha
    # view of the surface.
    surface_alpha = np.array(surface.get_view('A'), copy=False)
    surface_alpha[:,:] = array[:,:,3]

    return surface

    return surface

def getbrshattrib(line):
        retline = ""
        constructstring = ""
        hitequalssign = False
        for c in removespaces(line):
            if hitequalssign == False:
                if c != "=" and c != " ":
                    constructstring = constructstring+c
                else:
                    if c == "=":
                        hitequalssign = True
            else:
                retline = retline+c
        return [removespaces(constructstring),removespaces(retline)]
def swaptotool(tool):
    global canchangecolor,primaryr,primaryg,primaryb,primarya,currentr,currentg,currentb,currenta
    if os.path.exists(getresourceexactpath("\\brushes\\"+tool+"\\"+tool+".brsh")):
      for v in first_chars(getresourceexactpath("\\brushes\\"+tool+"\\"+tool+".brsh")):
        getbrshattri = getbrshattrib(v)
        if getbrshattri[0] == "colorable":
           canchangecolor = convertstringstopython(getbrshattri[1])
        elif getbrshattri[0] == "color":
            currentr = convertstringstopython(getbrshattri[1])[0]
            currentg = convertstringstopython(getbrshattri[1])[1]
            currentb = convertstringstopython(getbrshattri[1])[2]
            currenta = convertstringstopython(getbrshattri[1])[3]
    else:
        print("tool does not exist!")

def readconfig(readproperty):
    global canchangecolor,currentr,currentg,currentb,currenta
    for v in first_chars(getresourceexactpath("\\config.cfg")):
        cfgproperty = v
        if getbrshattrib(cfgproperty)[0] == readproperty:
            return convertstringstopython(getbrshattrib(cfgproperty)[1])

def setconfig(readproperty,value):
    global canchangecolor,currentr,currentg,currentb,currenta,cfg
    owoo = ""
    for v in first_chars(getresourceexactpath("\\config.cfg")):
        cfgproperty = v
        if getbrshattrib(cfgproperty)[0] == readproperty:
            owoo = owoo+getbrshattrib(cfgproperty)[0]+" = "+str(value)+"\n"
        else:
            owoo = owoo+v+"\n"
    cfg = open(getresourceexactpath("\\config.cfg"),"w")
    cfg.write(owoo)
    cfg.flush()

def swapcanvas(number):
    global currentcanvas,panning,panning2
    if number < len(canvases):
        currentcanvas = number
        panning2 = False
        panning = False

def newtextbox(screen,x,y,text,textcolor,background,textsize=15,alignment = "left",font="\\resources\\arial.ttf",blit=True):
    font = pygame.font.Font(getresourceexactpath(font), textsize)
    txt = font.render(text, True, textcolor, background)
    posx = x
    if alignment == "center":
        posx = x - (txt.get_size()[0] / 2)
    if alignment == "left":
        posx = x
    if alignment == "right":
        posx = x - txt.get_size()[0]
    pos = (int(posx),int(y - (txt.get_size()[1] / 2)))
    if blit == True:
        screen.blit(txt, pos)
    return txt

def newbarbutton(text,cmd):
    buttons.append([text,cmd])

buttons = []

def getcollision(x,y,width,height):
    if x <= pygame.mouse.get_pos()[0] and x + width >= pygame.mouse.get_pos()[0]:
        if y <= pygame.mouse.get_pos()[1] and y + height >= pygame.mouse.get_pos()[1]:
            return True
    return False

global owooo
owooo = []

def settingsdialog():
    newmessage(windowwidth / 2,windowheight / 2,750,500,"Settings")

def newmenu(x,y,width,height,targetheight,frommenu):
    global owooo
    owooo = [x,y,width,0,0,frommenu,[]]
def menubutton(text,cmd):
    owooo[6].append([text,cmd])
    owooo[4] = len(owooo[6]) * 16
    if len(text) * 6.25 > owooo[2]:
        owooo[2] = len(text) * 6.25

global running
running = True

def quitapp():
    global running
    running = False

def main():
  global gettingimage,canchangecolor,currentcanvas,currentbarinfo,currentbartimer,panning,panning2,titlebarheight,windowwidth,windowheight,owooo,running,primaryr,primaryg,primaryb,primarya,toolimage,zoom,nnoise
  pensize = readconfig("defaultpensize")
  currentcanvas = 0
  up = False
  down = False
  moveposx = 0
  moveposy = 0
  panning = False
  panning2 = False
  ctrlheld = False
  shiftheld = False
  zoom = 1
  posy = 0
  posx = 0
  surf = None
  previmage = []
  canchangecolor = True
  primaryr = 255
  primaryg = 255
  primaryb = 0
  primarya = 25
  secondaryr = 255
  secondaryg = 255
  secondaryb = 255
  secondarya = 255
  currentr = 0
  currentg = 0
  currentb = 0
  currenta = 255
  drawing = False
  prevsizex = 0
  prevsizey = 0
  windowwidth = 1280
  windowheight = 720
  toolimage = pygame.image.load(getresourceexactpath("\\resources\\notool.png")).convert_alpha()
  swaptotool("pencil")
  prevtime = time.time()
  previnfo = currentbarinfo
  sidebaropen = 1
  offset = 0
  homepage = False
  pensize = 2
  dt = 0
  selector = pygame.image.load(getresourceexactpath("\\resources\\selector.png")).convert_alpha()
  wheel = pygame.image.load(getresourceexactpath("\\resources\\imtoolazytomakeacolorwheel.png")).convert_alpha()
  logo = pygame.image.load(getresourceexactpath("\\resources\\pydraw.png")).convert_alpha()
  movingwindow = -1
  windowoffsetx = 0
  windowoffsety = 0
  xbuttonoffset = 0
  pensizemultiplier = readconfig("pensizehelp")
  sine = 0
  draggingwindow = False
  prevsidebaropen = False
  logo = pygame.transform.scale(logo,(18,18))
  display.blit(wheel, ((offset) - (250 - 25), 25))
  titlebarheight = readconfig("titlebarsize")
  currentlength = 0
  x = 0
  y = 0
  lastx = 0
  lasty = 0
  newbarbutton("file",None)
  newbarbutton("edit",None)
  newbarbutton("view",None)
  newbarbutton("effects",None)
  newbarbutton("plugins",None)
  antialiased = True
  if readconfig("firstrun") == True:
    setconfig("firstrun",False)
    newmessage(windowwidth / 2,windowheight / 2,430,50,"Welcome to Pydraw!")
    newtext(messages[0],430 / 2,2,"Welcome to Pydraw! A drawing program written entirely in Python!",15,"center")
    newbutton(messages[0],430 - 37,37,60,15,"Get started!")
    newbutton(messages[0],(430 - 37) - 60,37,50,15,"Settings")
    newbutton(messages[0],(430 - 37) - 140,37,100,15,"Settings (Advanced)",command=lambda : os.startfile(getresourceexactpath("\\config.cfg")))
  while running:
    if drawing == True and homepage == False and len(canvases) > 0:
        x = (((((pygame.mouse.get_pos()[0] - (windowwidth / 2)) + (canvases[currentcanvas][0] / 2)) / 1) + (posx / 1)) - (offset / 2)) * zoom
        y = ((((pygame.mouse.get_pos()[1] - (windowheight / 2)) + (canvases[currentcanvas][1] / 2)) / 1) + (posy / 1)) * zoom
        if lastx != x or lasty != y:
              xx = lastx
              yy = lasty
              dir = (pointtowards(lastx,lasty,x,y))
              for vvv in range(0,int(getdistance(lastx,x,lasty,y) * 10),1):
                drawcircle(xx,yy,0.5,[currentr,currentg,currentb,currenta],(pensize * pensizemultiplier) * 2.75,nnoise,antialiased=antialiased)
                xx += math.sin(dir) * 1
                yy += math.cos(dir) * 1
              lastx = x
              lasty = y
    currentlength += ((windowheight - (80 * 1.5)) - currentlength) / 5
    now = time.time()
    dt = (now - prevtime) / 100
    prevtime = now
    if len(owooo) > 0:
        owooo[3] += (owooo[4] - owooo[3]) / 5
    if canchangecolor == True:
        currenta = primarya
        currentr = primaryr
        currentg = primaryg
        currentb = primaryb
    if panning == True:
        posx = (moveposx - pygame.mouse.get_pos()[0])
        posy = (moveposy - pygame.mouse.get_pos()[1])
    if up == True:
        posy -= 30 / zoom
    if down == True:
        posy += 30 / zoom
    for event in pygame.event.get():
        # Check for QUIT event
        if event.type == pygame.QUIT:
            if len(canvases) > 0:
                msg = newmessage(windowwidth / 2,windowheight / 2,380,35,"Do you want to quit?")
                newtext(messages[msg],1,0,"You may have unsaved changes.",15,"left")
                newbutton(messages[msg],(380 - (40 / 2)) - 2,(35 - 3) - 10,40,20,"Quit",command=quitapp)
            else:
                running = False
        if event.type == pygame.MOUSEWHEEL:
            if event.y != 0 and ctrlheld:
                zoom += event.y * 0.1
            elif event.y != 0 and shiftheld:
                posx -= (30 * (event.y)) / zoom
            elif event.y != 0:
                posy -= (30 * (event.y)) / zoom
        if event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 2:
                moveposx = posx + pygame.mouse.get_pos()[0]
                moveposy = posy + pygame.mouse.get_pos()[1]
                if togglepanning == True: 
                    panning = not panning
                else:
                    panning = True
            if event.button == 1:
                if panning == False:
                        if panning2 == False:
                            if movingwindow == -1:
                                if draggingwindow == False:
                                    currentindex = 0
                                    if len(owooo) > 0:
                                        position = 0
                                        for vv in owooo[6]:
                                            if getcollision(owooo[0],20 + position,owooo[2],15) == True:
                                                if vv[1] != None:
                                                    vv[1]()
                                                    owooo = []
                                                    break
                                            position += 16
                                    if len(messages) > 0:
                                     movewindowtofront = -1
                                     messages2 = []
                                     for v in range(len(messages) - 1,-1,-1):
                                        messages2.append(messages[v])
                                     for v in messages2:
                                        if pygame.mouse.get_pos()[0] - v[0] >= (v[2] / 2) - xbuttonoffset and pygame.mouse.get_pos()[0] - v[0] <= (v[2] / 2) - (titlebarheight / 5.666666666):
                                            if pygame.mouse.get_pos()[1] - v[1] <= ((titlebarheight / 1.6190477)) and pygame.mouse.get_pos()[1] - v[1] >= titlebarheight - ((titlebarheight / 1.6190477) * 1.5):
                                                close(((len(messages) - 1) - currentindex))
                                                break
                                            else:
                                                movewindowtofront = ((len(messages) - 1) - currentindex)
                                                draggingwindow = True
                                                movingwindow = len(messages) - 1
                                                windowoffsetx = pygame.mouse.get_pos()[0] - v[0]
                                                windowoffsety = pygame.mouse.get_pos()[1] - v[1]
                                                break
                                        elif pygame.mouse.get_pos()[0] - v[0] >= v[2] / -2 and pygame.mouse.get_pos()[0] - v[0] <= v[2] / 2:
                                            if pygame.mouse.get_pos()[1] - v[1] >= 0 and pygame.mouse.get_pos()[1] - v[1] <= titlebarheight:
                                                movewindowtofront = ((len(messages) - 1) - currentindex)
                                                draggingwindow = True
                                                movingwindow = len(messages) - 1
                                                windowoffsetx = pygame.mouse.get_pos()[0] - v[0]
                                                windowoffsety = pygame.mouse.get_pos()[1] - v[1]
                                                break
                                            elif pygame.mouse.get_pos()[1] - v[1] >= 0 and pygame.mouse.get_pos()[1] - v[1] <= v[3] + titlebarheight:
                                                movewindowtofront = ((len(messages) - 1) - currentindex)
                                                if v[10] == True:
                                                  for vv in v[5]:
                                                    if vv[0] == "textbutton":
                                                        if (v[0] - (v[2] / 2)) + (vv[1] - (vv[3] / 2)) < pygame.mouse.get_pos()[0] and (v[0] - (v[2] / 2)) + (vv[1] + (vv[3] / 2)) > pygame.mouse.get_pos()[0]:
                                                            if (v[1] + titlebarheight) + (vv[2] - (vv[4] / 2)) < pygame.mouse.get_pos()[1] and (v[1] + titlebarheight) + (vv[2] + (vv[4] / 2)) > pygame.mouse.get_pos()[1]:
                                                                vv[6]()
                                        currentindex += 1
                                     if movewindowtofront != -1:
                                        awoo = messages[movewindowtofront]
                                        del messages[movewindowtofront]
                                        messages.append(awoo)
                                        

                if draggingwindow == False:
                 if panning2 == True:
                    moveposx = posx + pygame.mouse.get_pos()[0]
                    moveposy = posy + pygame.mouse.get_pos()[1]
                    panning = True
                 else:
                  if homepage == False and len(canvases) > 0 and drawing == False:
                    if len(canvases[currentcanvas][7]) > 0:
                        canvases[currentcanvas][7] = canvases[currentcanvas][7][0:canvases[currentcanvas][8]]
                    eee = canvases[currentcanvas][7]
                    eee.append(canvases[currentcanvas][2])
                    canvases[currentcanvas][7] = eee
                    canvases[currentcanvas][8] = len(canvases[currentcanvas][7]) - 1
                    drawing = True
                    lastx = (((((pygame.mouse.get_pos()[0] - (windowwidth / 2)) + (canvases[currentcanvas][0] / 2)) / 1) + (posx / 1)) - (offset / 2)) * zoom
                    lasty = ((((pygame.mouse.get_pos()[1] - (windowheight / 2)) + (canvases[currentcanvas][1] / 2)) / 1) + (posy / 1)) * zoom

        if event.type == pygame.MOUSEBUTTONUP:
            if event.button == 1:
                draggingwindow = False
                movingwindow = -1
                panning = False
                drawing = False
            if event.button == 2:
                if togglepanning == False:
                    panning = False
                    
        if event.type == pygame.KEYDOWN:
          if draggingwindow == False:
            if (event.key == pygame.K_RIGHTBRACKET) and ctrlheld:
              pensize += 1
              if pensize > 101:
                pensize = 101
            if (event.key == pygame.K_LEFTBRACKET) and ctrlheld:
              pensize -= 1
              if pensize < 0:
                pensize = 0
            if (event.key == pygame.KSCAN_KP_PLUS or event.key == pygame.K_KP_PLUS) and ctrlheld:
              titlebarheight += 1
              if titlebarheight >= 50:
                titlebarheight = 50
              setconfig("titlebarsize",titlebarheight)
            if (event.key == pygame.K_MINUS or event.key == pygame.K_KP_MINUS) and ctrlheld:
              titlebarheight -= 1
              if titlebarheight <= 10:
                titlebarheight = 10
              setconfig("titlebarsize",titlebarheight)
            if event.key == pygame.K_a and ctrlheld and shiftheld:
              antialiased = not antialiased
            if (event.key == pygame.K_1 or event.key == pygame.K_KP_1) and ctrlheld:
              swapcanvas(0)
            if (event.key == pygame.K_2 or event.key == pygame.K_KP_2) and ctrlheld:
              swapcanvas(1)
            if (event.key == pygame.K_3 or event.key == pygame.K_KP_3) and ctrlheld:
              swapcanvas(2)
            if (event.key == pygame.K_4 or event.key == pygame.K_KP_4) and ctrlheld:
              swapcanvas(3)
            if (event.key == pygame.K_5 or event.key == pygame.K_KP_5) and ctrlheld:
              swapcanvas(4)
            if (event.key == pygame.K_6 or event.key == pygame.K_KP_6) and ctrlheld:
              swapcanvas(5)
            if (event.key == pygame.K_7 or event.key == pygame.K_KP_7) and ctrlheld:
              swapcanvas(6)
            if (event.key == pygame.K_8 or event.key == pygame.K_KP_8) and ctrlheld:
              swapcanvas(7)
            if (event.key == pygame.K_9 or event.key == pygame.K_KP_9) and ctrlheld:
              swapcanvas(8)
            if (event.key == pygame.K_0 or event.key == pygame.K_KP_0) and ctrlheld:
              swapcanvas(9)
            if (event.key == pygame.K_UP) and ctrlheld:
                storage = primaryr
                primaryr = secondaryr
                secondaryr = storage
                storage = primaryg
                primaryg = secondaryg
                secondaryg = storage
                storage = primaryb
                primaryb = secondaryb
                secondaryb = storage
                storage = primarya
                primarya = secondarya
                secondarya = storage
                
            if (event.key == pygame.K_LEFT) and ctrlheld:
                if len(canvases) > 0 and homepage == False:
                    sidebaropen = 1 - sidebaropen
            if (event.key == pygame.K_w) and ctrlheld:
             if len(canvases) > 0 and homepage == False:
              if currentcanvas - 1 >= 0:
                del canvases[currentcanvas]
                currentcanvas -= 1
              else:
                del canvases[currentcanvas]
                currentcanvas = 0
            if (event.key == pygame.K_h) and ctrlheld:
              homepage = not homepage
            if (event.key == pygame.K_n) and ctrlheld:
              homepage = False
              makecanvas(640,480,[255,255,255,255])
            if event.key == pygame.K_o and ctrlheld:
              if gettingimage == False:
                homepage = False
                askimage()
            if event.key == pygame.K_s and ctrlheld and shiftheld:
              if len(canvases) > 0 and homepage == False:
                saveimg(canvases[currentcanvas],True)
            elif event.key == pygame.K_s and ctrlheld:
              if len(canvases) > 0 and homepage == False:
                saveimg(canvases[currentcanvas],False)
            if event.key == pygame.K_z and ctrlheld:
              if homepage == False and len(canvases) > 0:
                print(canvases[currentcanvas][8])
                if canvases[currentcanvas][8] > 0:
                    drawing = False
                    canvases[currentcanvas][8] -= 1
                    print(canvases[currentcanvas][2] == canvases[currentcanvas][7][canvases[currentcanvas][8]])
                    canvases[currentcanvas][2] = canvases[currentcanvas][7][canvases[currentcanvas][8]]
                    print(canvases[currentcanvas][2] == canvases[currentcanvas][7][canvases[currentcanvas][8]])
            if event.key == pygame.K_LSHIFT or event.key == pygame.K_RSHIFT:
                shiftheld = True
            if event.key == pygame.K_LCTRL or event.key == pygame.K_RCTRL:
                ctrlheld = True
            if event.key == pygame.K_SPACE:
                panning2 = True
            if event.key == pygame.K_F11 or event.key == pygame.KSCAN_F11:
                infoObject = pygame.display.Info()
                if pygame.display.is_fullscreen() == False:
                    prevsizex = windowwidth
                    prevsizey = windowheight
                    pygame.display.set_mode((0,0), pygame.FULLSCREEN)
                else:
                    print((prevsizex,prevsizey))
                    pygame.display.set_mode((prevsizex,prevsizey),pygame.RESIZABLE)
                    prevsizex = 0
                    prevsizey = 0
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LCTRL or event.key == pygame.K_RCTRL:
                ctrlheld = False
            if event.key == pygame.K_LSHIFT or event.key == pygame.K_RSHIFT:
                shiftheld = False
            if event.key == pygame.K_SPACE:
                panning2 = False
            if event.key == pygame.K_UP:
                up = False
            if event.key == pygame.K_DOWN:
                down = False
    display.fill(basecolor)
    offset += ((250 * clamp(sidebaropen + 0.03,0,1)) - offset) / 5
    if len(canvases) > 0 and homepage == False:
        if posy <= canvases[currentcanvas][1] / -2:
            posy = canvases[currentcanvas][1] / -2
        if posy >= canvases[currentcanvas][1] / 2:
            posy = canvases[currentcanvas][1] / 2
        if posx <= canvases[currentcanvas][0] / -2:
            posx = canvases[currentcanvas][0] / -2
        if posx >= canvases[currentcanvas][0] / 2:
            posx = canvases[currentcanvas][0] / 2
        arr = getimagearrayfordrawing(canvases[currentcanvas])
        Z = arr
        surf = pygame.surfarray.make_surface(Z)
        if zoom < 0.1:
            zoom = 0.1
        surf = pygame.transform.rotate(surf, -90)
        surf = pygame.transform.flip(surf, True, False)
        display.blit(surf, ((((((windowwidth / 2) / zoom) - posx) - (canvases[currentcanvas][0] / 2)) + (offset / 2)) * zoom, (((((windowheight / 2) / zoom) - posy) - (canvases[currentcanvas][1] / 2))) * zoom))
        if panning == False and panning2 == False and draggingwindow == False:
            pygame.draw.circle(display,(0,0,0),pygame.mouse.get_pos(),(zoom * ((pensize + 1) * readconfig("pensizehelp"))) + 1,3)
            pygame.draw.circle(display,(primaryr,primaryg,primaryb),pygame.mouse.get_pos(),zoom * ((pensize + 1) * readconfig("pensizehelp")),1)
        currentlength = 0
    else:
        sidebaropen = 0
        newtextbox(display,int(windowwidth / 2) + (offset / 2),45,"Pydraw",(outlinecolor[0] + 25,outlinecolor[1] + 25,outlinecolor[2] + 25),None,textsize=50,alignment="center",font="\\resources\\Flux Regular.otf")
        pygame.draw.rect(display, (outlinecolor[0] + 25,outlinecolor[1] + 25,outlinecolor[2] + 25), pygame.Rect((int(windowwidth / 2) + (offset / 2)) - ((windowwidth * 0.85) / 2), 80, (windowwidth * 0.85), currentlength))
    #drawing
    pygame.draw.rect(display, (0,0,0), pygame.Rect(0, windowheight - 21, windowwidth, 21))
    pygame.draw.rect(display, (0,0,0), pygame.Rect(0, 0, windowwidth, 21))
    pygame.draw.rect(display, outlinecolor, pygame.Rect(0, 0, windowwidth, 20))
    display.blit(logo, (1,1))
    newtextbox(display,1 + 20,(18 / 2) + 1,"pydraw",(outlinecolor[0] + 35,outlinecolor[1] + 35,outlinecolor[2] + 35),None,textsize=18,font="\\resources\\Flux Regular.otf")

    pygame.draw.rect(display, (0,0,0), pygame.Rect(0, 20, offset + 1, windowheight - 40))
    pygame.draw.rect(display, outlinecolor, pygame.Rect(0, 20, offset, windowheight - 40))
    color1 = (primaryr,primaryg,primaryb)
    color2 = (secondaryr,secondaryg,secondaryb)
    if canchangecolor == False:
        (r, g, b) = colorsys.rgb_to_hsv(color1[0] / 255,color1[1] / 255,color1[2] / 255)
        (r, g, b) = colorsys.hsv_to_rgb(r,0,b)
        color1 = (r * 255,g * 255,b * 255)
        (r, g, b) = colorsys.rgb_to_hsv(color2[0] / 255,color2[1] / 255,color2[2] / 255)
        (r, g, b) = colorsys.hsv_to_rgb(r,0,b) 
        color2 = (r * 255,g * 255,b * 255)
    colory = 180
    colorx = 240
    pygame.draw.rect(display, (0,0,0), pygame.Rect((offset - 1) - colorx, colory - 1, 42,42))
    pygame.draw.rect(display, (0,0,0), pygame.Rect(((offset - 1) - colorx) + 20, (colory - 1) + 20, 42,42))
    pygame.draw.rect(display, color2, pygame.Rect(((offset) - colorx) + 20, colory + 20, 40,40))
    pygame.draw.rect(display, color1, pygame.Rect((offset) - colorx, colory, 40,40))
    pensizeboxy = 260
    newtextbox(display,(offset) - (240 - 25),pensizeboxy,"Pen size:",(outlinecolor[0] + 95,outlinecolor[1] + 95,outlinecolor[2] + 95),None,textsize=16,alignment="left")
    pygame.draw.rect(display, (outlinecolor[0] - 5,outlinecolor[1] - 5,outlinecolor[2] - 5), pygame.Rect(((offset - (240 - 25)) - 2) + 75, (pensizeboxy - (18 / 2)), 34,18))
    newtextbox(display,((offset) - (240 - 25)) + 75,pensizeboxy,addspaces(str(pensize - 1),5),(outlinecolor[0] + 95,outlinecolor[1] + 95,outlinecolor[2] + 95),None,textsize=16,alignment="left")
    display.blit(wheel, ((offset) - (250 - 25), 25))
    radius = ((173 * colorsys.rgb_to_hsv(primaryr,primaryg,primaryb)[1]) / 2)
    centerx = (((offset)) - (100 + (15 / 2))) - 25
    centery = (100 - (15 / 2)) + 25
    display.blit(selector, (centerx + (math.sin(math.radians((colorsys.rgb_to_hsv(primaryr,primaryb,primaryg)[0] * 360) + -90)) * radius),centery + (math.cos(math.radians((colorsys.rgb_to_hsv(primaryr,primaryb,primaryg)[0] * 360) + -90)) * radius)))
    pygame.draw.rect(display, outlinecolor, pygame.Rect(0, windowheight - 20, windowwidth, windowheight))
    if currentbarinfo != "":
        newtextbox(display,10,windowheight - 10,currentbarinfo,(255,255,255),None)
    currentindex = 0


    #rendering file menus
    hovering = False
    position = 0
    for v in buttons:
        color = (outlinecolor[0],outlinecolor[1],outlinecolor[2])
        pygame.draw.rect(display, (outlinecolor[0] + 35,outlinecolor[1] + 35,outlinecolor[2] + 35), pygame.Rect(85 + position - 5,1, 1, 18))
        txt = newtextbox(display,85 + position,(18 / 2) + 1,v[0],(outlinecolor[0] + 35,outlinecolor[1] + 35,outlinecolor[2] + 35),None,textsize=16,blit=False)
        if getcollision((85 + position - 4),0,txt.get_size()[0] + 9,20) == True:
            if len(owooo) > 0:
                if owooo[5] != v[0]:
                    newmenu(81 + position,(18 / 2) + 1,200,0,200,v[0])
                    if v[0] == "file":
                        menubutton("New (Ctrl + N)",lambda : makecanvas(800,600,[255,255,255,255]))
                        menubutton("Open (Ctrl + O)",lambda : askimage())
                        if homepage == False and len(canvases) > 0:
                            menubutton("Save (Ctrl + S)", lambda : saveimg(canvases[currentcanvas],False))
                            menubutton("Save as (Ctrl + Shift + S)", lambda : saveimg(canvases[currentcanvas],True))
                    if v[0] == "edit":
                        menubutton("Settings",lambda : settingsdialog())
                        menubutton("Settings (Advanced)",lambda : os.startfile(getresourceexactpath("\\config.cfg")))
                    if v[0] == "effects":
                        menubutton("Settings",lambda : settingsdialog())
                        
                    
            else:
                newmenu(81 + position,(18 / 2) + 1,200,0,200,v[0])
            color = (outlinecolor[0] + 15,outlinecolor[1] + 15,outlinecolor[2] + 15)
            hovering = True
        if len(owooo) > 0:
            if owooo[5] == v[0]:
                color = (outlinecolor[0] + 15,outlinecolor[1] + 15,outlinecolor[2] + 15)
        pygame.draw.rect(display, color, pygame.Rect((85 + position - 4),0, txt.get_size()[0] + 9, 20))
        newtextbox(display,85 + position,(18 / 2) + 1,v[0],(color[0] + 45,color[1] + 45,color[2] + 45),None,textsize=16)
        position += txt.get_size()[0] + 10
    if len(owooo) > 0:
      if len(owooo[6]) > 0:
        pygame.draw.rect(display, (outlinecolor[0] + 15,outlinecolor[1] + 15,outlinecolor[2] + 15), pygame.Rect(owooo[0], 20, owooo[2], owooo[3]))
        position = 0
        color = ()
        for vv in owooo[6]:
          if position < owooo[3]:
            color = (outlinecolor[0] + 15,outlinecolor[1] + 15,outlinecolor[2] + 15)
            if getcollision(owooo[0],20 + position,owooo[2],15) == True:
                hovering = True
                color = (outlinecolor[0] + 25,outlinecolor[1] + 25,outlinecolor[2] + 25)
            pygame.draw.rect(display, color, pygame.Rect(owooo[0], 20 + position, owooo[2], 15))
            newtextbox(display,owooo[0] + 2,27 + position,vv[0],(outlinecolor[0] + 95,outlinecolor[1] + 95,outlinecolor[2] + 95),None,textsize=13,alignment="left")
            position += 16
          else:
            break
    if hovering == False:
        owooo = []
    #rendering windows
    if len(messages) > 0:
      for v in messages:
        v[3] += (v[8] - v[3]) / 5
        v[0] += (v[6] - v[0]) / 5
        v[1] += (v[7] - v[1]) / 5
        if movingwindow == currentindex:
            v[6] = pygame.mouse.get_pos()[0] - windowoffsetx
            v[7] = pygame.mouse.get_pos()[1] - windowoffsety
        pygame.draw.rect(display, (0,0,0), pygame.Rect((v[0] - (v[2] / 2)) - 1,v[1] - 1,(v[2]) + 2,(v[3]) + titlebarheight + 2))
        pygame.draw.rect(display, (outlinecolor[0] + 15,outlinecolor[1] + 15,outlinecolor[2] + 15), pygame.Rect(v[0] - (v[2] / 2),v[1],(v[2]),(v[3]) + titlebarheight))
        pygame.draw.rect(display, (outlinecolor[0] + 25,outlinecolor[1] + 25,outlinecolor[2] + 25), pygame.Rect(v[0] - (v[2] / 2),v[1],(v[2]),titlebarheight))
        xbuttonoffset = (((titlebarheight / 1.6190477) * 1.5) - ((titlebarheight / 5.666666666)))
        xbuttoncolor = (170,0,0)
        if pygame.mouse.get_pos()[0] - v[0] >= (v[2] / 2) - xbuttonoffset and pygame.mouse.get_pos()[0] - v[0] <= (v[2] / 2) - (titlebarheight / 5.666666666):
            if pygame.mouse.get_pos()[1] - v[1] <= ((titlebarheight / 1.6190477)) and pygame.mouse.get_pos()[1] - v[1] >= titlebarheight - ((titlebarheight / 1.6190477) * 1.5):
                xbuttoncolor = (230,30,30)
        pygame.draw.rect(display, xbuttoncolor, pygame.Rect(v[0] + (v[2] / 2) - xbuttonoffset,(v[1]) + (titlebarheight / 5.666666666),(titlebarheight / 1.6190477),(titlebarheight / 1.6190477)))
        newtextbox(display,(v[0] + (v[2] / 2) - xbuttonoffset) + ((titlebarheight / 1.6190477)/2),(v[1]) + (titlebarheight / 5.666666666) + ((titlebarheight / 1.6190477)/2),"×",(255,255,255),None,textsize=int((titlebarheight / 1.6190477)),alignment="center")
        newtextbox(display,(v[0] - (v[2] / 2)) + (titlebarheight / 4.85714286),v[1] + (titlebarheight / 2),v[4],(outlinecolor[0] + 95,outlinecolor[1] + 95,outlinecolor[2] + 95),None,textsize=int((titlebarheight / 1.6190477)),alignment="left",font="\\resources\\arialbi.ttf")
        for vv in v[5]:
          if vv[0] == "textbutton":
            color = (outlinecolor[0] + 50,outlinecolor[1] + 50,outlinecolor[2] + 50)
            if (v[0] - (v[2] / 2)) + (vv[1] - (vv[3] / 2)) < pygame.mouse.get_pos()[0] and (v[0] - (v[2] / 2)) + (vv[1] + (vv[3] / 2)) > pygame.mouse.get_pos()[0]:
                if (v[1] + titlebarheight) + (vv[2] - (vv[4] / 2)) < pygame.mouse.get_pos()[1] and (v[1] + titlebarheight) + (vv[2] + (vv[4] / 2)) > pygame.mouse.get_pos()[1]:
                    color = (outlinecolor[0] + 70,outlinecolor[1] + 70,outlinecolor[2] + 70)
            if v[10] == False:
                color = (outlinecolor[0] + 45,outlinecolor[1] + 45,outlinecolor[2] + 45)
            pygame.draw.rect(display, (outlinecolor[0] + 25,outlinecolor[1] + 25,outlinecolor[2] + 25), pygame.Rect(((v[0] - (v[2] / 2)) + vv[1] - (vv[3] / 2)) - 1,(((v[1] + (titlebarheight / 2)) + vv[2] - (vv[4] * 0.5)) + (titlebarheight / 2)) - 1,vv[3] + 2,vv[4] + 2))
            pygame.draw.rect(display, color, pygame.Rect((v[0] - (v[2] / 2)) + vv[1] - (vv[3] / 2),((v[1] + (titlebarheight / 2)) + vv[2] - (vv[4] * 0.5)) + (titlebarheight / 2),vv[3],vv[4]))
            newtextbox(display,(v[0] - (v[2] / 2)) + vv[1],(((v[1] + titlebarheight) + vv[2])),vv[5],(255,255,255),None,alignment="center",textsize=10)
          if vv[0] == "textbox":
            teccst = vv[3]
            fullstring = ""
            constructingstring = False
            constructstr = ""
            table = ["0","1","2","3","4","5","6","7","8","9"]
            for vvv in range(0,len(teccst) + 1,1):
                if constructingstring == False:
                    if teccst[vvv - 1:vvv] != "!":
                        fullstring = fullstring+teccst[vvv - 1:vvv]
                    else:
                        constructingstring = True
                        constructstr = ""
                else:
                    if teccst[vvv - 1:vvv] not in table or vvv + 1 == len(teccst):
                        if teccst[vvv - 1:vvv] != "!":
                            constructstr = constructstr+teccst[vvv - 1:vvv]
                            constructingstring = False
                            fullstring = fullstring+"!"+constructstr
                        else:
                            fullstring = fullstring+str(v[9][int(constructstr)])
                            constructingstring = False
                    else:
                        constructstr = constructstr+teccst[vvv - 1:vvv]
            teccst = fullstring

            newtextbox(display,(v[0] - (v[2] / 2)) + vv[1],((v[1] + vv[2]) + titlebarheight) + (vv[4] / 2),teccst,(outlinecolor[0] + 95,outlinecolor[1] + 95,outlinecolor[2] + 95),None,textsize=vv[4],alignment=vv[5])
        if v[3] < 0.1:
            del messages[currentindex]
        currentindex += 1
    #drawcircle(pygame.mouse.get_pos()[0],pygame.mouse.get_pos()[1],100,(currentr,currentg,currentb,currenta),15,25)
    pygame.display.flip()
    windowwidth = pygame.display.get_window_size()[0]
    windowheight = pygame.display.get_window_size()[1]
    if currentbartimer <= 0:
        currentbarinfo = ""
    else:
        currentbartimer -= dt
    canchangecolor = True
main()
pygame.quit()
